import { supabase } from './supabaseClient.js';
const idUsuario = localStorage.getItem('player_id');

// Vari√°veis globais
let desafios = [];
let desafioIndex = 0;
let pontuacaoTotal = 0;
let desafiosFeitos = [];
let desafiosRecusados = [];
let horaInicioJogo = null;
let horaFimJogo = null;
let intervaloCronometro = null;
let acaoEmAndamento = false;

// ‚è≥ Buscar hora de in√≠cio do jogo no Supabase
async function buscarHoraInicioJogo() {
    const { data, error } = await supabase
        .from('jogo_status')
        .select('inicio_em')
        .eq('id', 1)
        .single();

    if (error) {
        console.error("‚ùå Erro ao buscar hora de in√≠cio:", error.message);
        return;
    }

    if (data && data.inicio_em) {
    // Corrigir UTC para local manualmente
    horaInicioJogo = new Date(data.inicio_em);
    horaInicioJogo = new Date(horaInicioJogo.getTime() - 3 * 60 * 60 * 1000); // -3h

    // Definir fim do jogo como 3h depois
    horaFimJogo = new Date(horaInicioJogo.getTime() + 3 * 60 * 60 * 1000);

    console.log("In√≠cio corrigido (local):", horaInicioJogo.toLocaleString());
    console.log("Fim corrigido (local):", horaFimJogo.toLocaleString());

    await carregarPontuacaoDoUsuario();
    iniciarJogo();
    }

else {
        document.getElementById("desafioTexto").textContent = "‚è≥ Aguardando o in√≠cio do jogo...";
        setTimeout(buscarHoraInicioJogo, 5000);
    }
}

// üì• Carrega a pontua√ß√£o do Supabase
async function carregarPontuacaoDoUsuario() {
    if (!idUsuario) return;

    const { data, error } = await supabase
        .from('usuarios')
        .select('pontuacao')
        .eq('id', idUsuario)
        .single();

    if (error) {
        console.error("‚ùå Erro ao carregar pontua√ß√£o:", error.message);
        return;
    }

    if (data && typeof data.pontuacao === 'number') {
        pontuacaoTotal = data.pontuacao;
        document.getElementById("pontuacao").textContent = `${pontuacaoTotal} pts`;
    }
}

// üéØ Gera os desafios do jogo
function gerarDesafios() {
    const desafios10_emb = [
        { texto: "Miss√£o: Selfie! ‚Üí Tire uma selfie com tr√™s pessoas da festa.", pontos: 10 },
        { texto: "Cora√ß√£o aberto ‚Üí Elogie algu√©m aleat√≥rio de forma sincera.", pontos: 10 },
        { texto: "Desafio da pose! ‚Üí Durante uma m√∫sica, congele em uma pose engra√ßada por 10 segundos.", pontos: 10 },
        { texto: "Desafio do drink criativo ‚Üí Invente um nome e hist√≥ria para o drink que estiver tomando.", pontos: 10 },
        { texto: "Brinde rel√¢mpago ‚Üí Brinde com algu√©m da festa.", pontos: 10 },
        { texto: "Fa√ßa uma dancinha de TikTok com outra pessoa.", pontos: 10 },
        { texto: "Passinho do ombro ‚Üí Fa√ßa apenas o ombro dan√ßar durante 10 segundos.", pontos: 10 },
        { texto: "Irm√£o de cores ‚Üí Encontre algu√©m com algo da mesma cor que voc√™ est√° usando e tire uma foto juntos.", pontos: 10 },
        { texto: "Complete a frase ‚Üí Algu√©m diz: ‚ÄúEssa festa √©‚Ä¶‚Äù e voc√™ completa com a palavra mais absurda poss√≠vel.", pontos: 10 },
        { texto: "Toca aqui! ‚Üí Fa√ßa um high five com 5 pessoas diferentes em menos de 1 minuto.", pontos: 10 }
    ].sort(() => Math.random() - 0.5).slice(0, 3);

    const desafios50_emb = [
        { texto: "Dan√ßar com algu√©m ‚Üí Chame algu√©m para dan√ßar uma m√∫sica inteira.", pontos: 50 },
        { texto: "Influencie algu√©m a beber com voc√™ ‚Üí Use carisma e l√°bia!", pontos: 50 },
        { texto: "Solte a voz! ‚Üí Cante ou duble uma m√∫sica em voz alta.", pontos: 50 },
        { texto: "Famoso por um minuto! ‚Üí Chame a aten√ß√£o de todos como se fosse uma celebridade.", pontos: 50 },
        { texto: "Corrente de elogios ‚Üí Elogie algu√©m e incentive essa pessoa a elogiar outra.", pontos: 50 },
        { texto: "Dueto improvisado ‚Üí Cante (ou duble) com outra pessoa uma m√∫sica qualquer.", pontos: 50 },
        { texto: "Desfile com algu√©m ‚Üí Caminhem juntos como se estivessem em um desfile.", pontos: 50 },
        { texto: "Troca de nomes ‚Üí Apresente-se com um nome falso criativo.", pontos: 50 },
        { texto: "Pedir um 'look do dia' de algu√©m ‚Üí Entreviste alguem como se fosse influencer e comente sobre a roupa dela.", pontos: 50 },
        { texto: "Ritual do drink invis√≠vel ‚Üí Brinde com um copo vazio fingindo que √© a bebida mais cara do mundo.", pontos: 50 }
    ].sort(() => Math.random() - 0.5).slice(0, 3);
    const desafios100_emb = [
        { texto: "Mostre seu lado dan√ßarino! ‚Üí Dance solo por 1 minuto na pista de dan√ßa.", pontos: 100 },
        { texto: "Dance como se ningu√©m estivesse olhando (mas todos est√£o!) ‚Üí Fa√ßa sua dan√ßa mais esquisita em p√∫blico.", pontos: 100 },
        { texto: "Caminhada de passarela do tapete neon ‚Üí Entre com pose e presen√ßa como se estivesse num desfile de gala.", pontos: 100 },
        { texto: "Desafio Britney Breakdown ‚Üí Fa√ßa um mini drama estilo estrela pop. Exagere com humor!", pontos: 100 },
        { texto: "Troca de personalidade ‚Üí Imite um famoso por 30 segundos.", pontos: 100 },
        { texto: "Flashmob solo ‚Üí Comece a dan√ßar do nada e tente puxar as pessoas pra dan√ßar com voc√™.", pontos: 100 },
        { texto: "Declare algo '√©pico' para todos ouvirem ‚Üí Tipo: 'Eu sou a alma dessa festa!'", pontos: 100 },
        { texto: "Proposta de casamento fake ‚Üí Finja propor algu√©m com pose e tudo (com consentimento!).", pontos: 100 },
        { texto: "Grave um v√≠deo como influencer ‚Üí Mostre a festa e comente como se fosse um story.", pontos: 100 },
        { texto: "Entrevista maluca ‚Üí Improvise uma entrevista com algu√©m como se ele fosse um famoso.", pontos: 100 }

    ].sort(() => Math.random() - 0.5).slice(0, 3);

    const todos = [...desafios10_emb, ...desafios50_emb, ...desafios100_emb];
    return todos.sort(() => Math.random() - 0.5);
}

// üïí Calcula quantos desafios devem estar liberados
function calcularDesafiosDisponiveis() {
    const agora = new Date();
    const diffMinutos = Math.floor((agora.getTime() - horaInicioJogo.getTime()) / (1000 * 60));
    return Math.min(1 + Math.floor(diffMinutos / 20), desafios.length);
}

// ‚ñ∂Ô∏è Inicia o jogo
function iniciarJogo() {
    const desafiosSalvos = localStorage.getItem('desafios');
    const indiceSalvo = localStorage.getItem('desafioIndex');
    const feitosSalvos = localStorage.getItem('desafiosFeitos');

    if (desafiosSalvos) {
        desafios = JSON.parse(desafiosSalvos);
        desafioIndex = parseInt(indiceSalvo, 10) || 0;
        desafiosFeitos = feitosSalvos ? JSON.parse(feitosSalvos) : [];
    } else {
        desafios = gerarDesafios();
        desafioIndex = 0;
        desafiosFeitos = [];
        localStorage.setItem('desafios', JSON.stringify(desafios));
        localStorage.setItem('desafioIndex', desafioIndex);
        localStorage.setItem('desafiosFeitos', JSON.stringify([]));
    }
   console.log("üî¢ Total de desafios gerados:", desafios.length);
    mostrarDesafio();
    atualizarCronometro();
    intervaloCronometro = setInterval(() => {
        atualizarCronometro();
        mostrarDesafio();
    }, 1000);
}

// üß© Mostra o desafio atual
function mostrarDesafio() {
    const agora = Date.now();
    if (agora >= horaFimJogo) {
        encerrarJogo("Tempo encerrado!");
        return;
    }

    const desafiosLiberados = calcularDesafiosDisponiveis();

    if (desafioIndex < desafiosLiberados) {
        const desafioAtual = desafios[desafioIndex];
        document.getElementById("loading").style.display = "none";
        document.getElementById("desafioContainer").style.display = "block";
        document.getElementById("desafioTexto").textContent = `Desafio ${desafioIndex + 1}: ${desafioAtual.texto}`;
        document.getElementById("valorPonto").textContent = ` (${desafioAtual.pontos} pts)`;
        document.getElementById("botaoFeito").disabled = false;
        document.getElementById("botaoRecusar").disabled = false;
    } else {
        document.getElementById("desafioTexto").textContent = "‚è≥ Aguardando o pr√≥ximo desafio...";
        document.getElementById("botaoFeito").disabled = true;
        document.getElementById("botaoRecusar").disabled = true;
    }
}

// ‚úÖ Marcar desafio como feito
async function marcarDesafioComoFeito() {
       if (acaoEmAndamento) return;
    acaoEmAndamento = true;

    document.getElementById("botaoFeito").disabled = true;
    document.getElementById("botaoRecusar").disabled = true;

    desafiosFeitos.push(desafios[desafioIndex]);
    localStorage.setItem('desafiosFeitos', JSON.stringify(desafiosFeitos));

    pontuacaoTotal += desafios[desafioIndex].pontos;
    document.getElementById("pontuacao").textContent = `${pontuacaoTotal} pts`;
    document.getElementById("desafioTexto").textContent = "‚úÖ Desafio conclu√≠do! Carregando pr√≥ximo...";


    if (idUsuario) {
        const { error } = await supabase
            .from('usuarios')
            .update({ pontuacao: pontuacaoTotal })
            .eq('id', idUsuario);

        if (error) console.error("Erro ao atualizar pontua√ß√£o:", error.message);
    }

    setTimeout(() => {
        avancarParaProximo();
        acaoEmAndamento = false; // üîì libera para pr√≥xima a√ß√£o
    }, 1500);
}

// ‚ùå Recusar desafio
function recusarDesafio() {
    document.getElementById("botaoFeito").disabled = true;
    document.getElementById("botaoRecusar").disabled = true;

    desafiosRecusados.push(desafios[desafioIndex]);
    document.getElementById("desafioTexto").textContent = "‚ùå Desafio recusado! Carregando pr√≥ximo...";
    setTimeout(avancarParaProximo, 1500);
}

// ‚è≠ Avan√ßa para o pr√≥ximo
function avancarParaProximo() {
    desafioIndex++;
    localStorage.setItem('desafioIndex', desafioIndex);
    document.getElementById("desafioContainer").style.display = "none";
    document.getElementById("loading").style.display = "block";
}

// ‚è± Atualiza cron√¥metro
function atualizarCronometro() {
    const agora = new Date(); // tamb√©m como objeto Date
    const tempoRestante = horaFimJogo - agora;

    if (tempoRestante <= 0) {
        document.getElementById("timer").textContent = "00:00:00";
        encerrarJogo("Tempo esgotado!");
        return;
    }

    const horas = Math.floor(tempoRestante / (1000 * 60 * 60));
    const minutos = Math.floor((tempoRestante % (1000 * 60 * 60)) / (1000 * 60));
    const segundos = Math.floor((tempoRestante % (1000 * 60)) / 1000);

    document.getElementById("timer").textContent =
        `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
}


// üõë Encerra o jogo
function encerrarJogo(mensagem) {
    clearInterval(intervaloCronometro);
    document.getElementById("botaoFeito").disabled = true;
    document.getElementById("botaoRecusar").disabled = true;
    document.getElementById("loading").style.display = "none";
    document.getElementById("desafioContainer").style.display = "block";
    document.getElementById("valorPonto").textContent = "";
    document.getElementById("desafioTexto").textContent =
        `${mensagem} Voc√™ fez ${desafiosFeitos.length} desafio(s) e marcou ${pontuacaoTotal} ponto(s).`;
}

// Inicializa√ß√£o
window.marcarDesafioComoFeito = marcarDesafioComoFeito;
window.recusarDesafio = recusarDesafio;
document.getElementById("pontuacao").textContent = `${pontuacaoTotal} pts`;

window.onload = () => {
    verificarJogador();
};

async function verificarJogador() {
    const playerId = localStorage.getItem('player_id');

    if (!playerId) {
        window.location.href = '../index.html';
        return;
    }

    const { data, error } = await supabase
        .from('usuarios')
        .select('id')
        .eq('id', playerId)
        .single();

    if (error || !data) {
        localStorage.clear();
        window.location.href = '../index.html';
        return;
    }

    buscarHoraInicioJogo();
}
